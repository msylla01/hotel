const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function updateExistingDataPreserve() {
  try {
    console.log('üîÑ Mise √† jour donn√©es existantes [msylla01] - 2025-10-04 23:25:58');
    console.log('‚ö†Ô∏è  AUCUNE SUPPRESSION - PR√âSERVATION TOTALE');

    // 1. V√©rifier et compter les donn√©es existantes
    const existingRooms = await prisma.room.findMany();
    const existingBookings = await prisma.booking.findMany();
    const existingManagerBookings = await prisma.managerBooking.findMany();
    const existingUsers = await prisma.user.findMany();

    console.log('üìä DONN√âES EXISTANTES D√âTECT√âES :');
    console.log(`   üè® Chambres: ${existingRooms.length}`);
    console.log(`   üìã R√©servations: ${existingBookings.length}`);
    console.log(`   üë®‚Äçüíº R√©servations manager: ${existingManagerBookings.length}`);
    console.log(`   üë§ Utilisateurs: ${existingUsers.length}`);

    // 2. Mettre √† jour les chambres existantes (ajouter climateType si manquant)
    console.log('\nüè® Mise √† jour chambres existantes...');
    for (const room of existingRooms) {
      if (!room.climateType) {
        // Assigner climateType bas√© sur le type de chambre
        const climateType = ['SUITE', 'DELUXE'].includes(room.type) ? 'CLIMATISE' : 'VENTILE';
        
        await prisma.room.update({
          where: { id: room.id },
          data: { climateType }
        });
        
        console.log(`   ‚úÖ ${room.name}: ${room.type} ‚Üí ${climateType}`);
      } else {
        console.log(`   ‚è≠Ô∏è  ${room.name}: climateType d√©j√† d√©fini (${room.climateType})`);
      }
    }

    // 3. Mettre √† jour les r√©servations manager existantes
    console.log('\nüë®‚Äçüíº Mise √† jour r√©servations manager existantes...');
    for (const booking of existingManagerBookings) {
      const updateData = {};
      
      if (!booking.climateType) {
        // R√©cup√©rer la chambre pour d√©terminer le type de climatisation
        const room = await prisma.room.findUnique({
          where: { id: booking.roomId }
        });
        
        if (room) {
          updateData.climateType = room.climateType;
          updateData.roomType = room.type;
        } else {
          // Fallback si chambre non trouv√©e
          updateData.climateType = 'VENTILE';
          updateData.roomType = 'DOUBLE';
        }
      }
      
      if (!booking.roomType) {
        const room = await prisma.room.findUnique({
          where: { id: booking.roomId }
        });
        updateData.roomType = room?.type || 'DOUBLE';
      }
      
      if (Object.keys(updateData).length > 0) {
        await prisma.managerBooking.update({
          where: { id: booking.id },
          data: updateData
        });
        
        console.log(`   ‚úÖ Booking ${booking.id}: +climateType=${updateData.climateType}, +roomType=${updateData.roomType}`);
      } else {
        console.log(`   ‚è≠Ô∏è  Booking ${booking.id}: d√©j√† √† jour`);
      }
    }

    // 4. Cr√©er quelques chambres suppl√©mentaires si tr√®s peu existent
    if (existingRooms.length < 3) {
      console.log('\nüÜï Ajout chambres suppl√©mentaires (donn√©es insuffisantes)...');
      
      const additionalRooms = [
        {
          name: 'Chambre 101',
          description: 'Chambre double confortable',
          type: 'DOUBLE',
          climateType: 'VENTILE',
          price: 120,
          capacity: 2,
          isActive: true
        },
        {
          name: 'Suite 201',
          description: 'Suite luxueuse climatis√©e',
          type: 'SUITE',
          climateType: 'CLIMATISE',
          price: 250,
          capacity: 4,
          isActive: true
        }
      ];

      for (const roomData of additionalRooms) {
        // V√©rifier si une chambre avec ce nom existe d√©j√†
        const existing = await prisma.room.findFirst({
          where: { name: roomData.name }
        });
        
        if (!existing) {
          const room = await prisma.room.create({
            data: roomData
          });
          console.log(`   ‚úÖ Cr√©√©e: ${room.name} - ${room.type} ${room.climateType}`);
        } else {
          console.log(`   ‚è≠Ô∏è  ${roomData.name} existe d√©j√†`);
        }
      }
    }

    // 5. V√©rification finale
    const finalRooms = await prisma.room.findMany();
    const finalManagerBookings = await prisma.managerBooking.findMany();

    console.log('\nüìä √âTAT FINAL :');
    console.log(`   üè® Chambres totales: ${finalRooms.length}`);
    console.log(`   üë®‚Äçüíº R√©servations manager: ${finalManagerBookings.length}`);
    
    console.log('\nüè® CHAMBRES FINALES :');
    finalRooms.forEach(room => {
      console.log(`   ${room.name} | ${room.type} | ${room.climateType || 'NON_D√âFINI'} | ${room.price}‚Ç¨`);
    });

    console.log('\n‚úÖ MISE √Ä JOUR TERMIN√âE AVEC PR√âSERVATION COMPL√àTE !');

  } catch (error) {
    console.error('‚ùå Erreur mise √† jour donn√©es [msylla01]:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

updateExistingDataPreserve();
