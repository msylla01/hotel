generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  password  String
  role      Role     @default(CLIENT)
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]
  reviews  Review[]

  @@map("users")
}

model Room {
  id          String   @id @default(cuid())
  name        String
  type        RoomType
  price       Float
  description String?
  capacity    Int
  size        Float?
  amenities   String[]
  images      String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings Booking[]
  reviews  Review[]

  @@map("rooms")
}

model Booking {
  id          String        @id @default(cuid())
  checkIn     DateTime
  checkOut    DateTime
  guests      Int
  totalAmount Float
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  payment Payment?

  @@map("bookings")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  currency      String        @default("EUR")
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  stripeId      String?
  paypalId      String?
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  @@map("reviews")
}

enum Role {
  CLIENT
  ADMIN
  STAFF
}

enum RoomType {
  SINGLE
  DOUBLE
  SUITE
  FAMILY
  DELUXE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  ORANGE_MONEY
  WAVE
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
