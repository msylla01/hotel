// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  firstName         String?
  lastName          String?
  phone             String?   // NOUVEAU CHAMP
  address           String?   // NOUVEAU CHAMP  
  birthDate         DateTime? // NOUVEAU CHAMP
  preferences       Json?     // NOUVEAU CHAMP pour stocker les préférences
  role              Role      @default(CLIENT)
  isActive          Boolean   @default(true)
  emailVerified     Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  bookings          Booking[]
  reviews           Review[]

  @@map("users")
}

model Room {
  id              String    @id @default(cuid())
  name            String
  description     String?
  type            RoomType
  price           Float
  capacity        Int
  size            Float?
  images          String[]  @default([])
  amenities       String[]  @default([])
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  bookings        Booking[]
  reviews         Review[]

  @@map("rooms")
}

model Booking {
  id              String        @id @default(cuid())
  userId          String
  roomId          String
  checkIn         DateTime
  checkOut        DateTime
  guests          Int
  totalAmount     Float
  status          BookingStatus @default(PENDING)
  specialRequests String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  room            Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  payment         Payment[]

  @@map("bookings")
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String
  amount          Float
  currency        String        @default("EUR")
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?
  stripeId        String?
  paypalId        String?
  errorMessage    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id              String    @id @default(cuid())
  userId          String
  roomId          String
  rating          Int       // 1 à 5 étoiles
  comment         String?
  isApproved      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  room            Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// Enums
enum Role {
  CLIENT
  ADMIN
  STAFF
}

enum RoomType {
  SINGLE
  DOUBLE
  SUITE
  FAMILY
  DELUXE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  CHECKED_IN
  CHECKED_OUT
  COMPLETED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  ORANGE_MONEY
  WAVE
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}
