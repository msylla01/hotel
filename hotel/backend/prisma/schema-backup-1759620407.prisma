// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  firstName         String?
  lastName          String?
  phone             String?
  address           String?
  birthDate         DateTime?
  preferences       Json?
  role              Role      @default(CLIENT)
  isActive          Boolean   @default(true)
  emailVerified     Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations existantes
  bookings          Booking[]
  reviews           Review[]
  
  // Relations espace gérant
  managerBookings   ManagerBooking[]
  managerLogs       ManagerActivityLog[]

  @@map("users")
}

model Room {
  id              String    @id @default(cuid())
  name            String
  description     String?
  type            RoomType
  price           Float
  capacity        Int
  size            Float?
  climateType     ClimateType @default(VENTILE)
  images          String[]  @default([])
  amenities       String[]  @default([])
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations existantes
  bookings        Booking[]
  reviews         Review[]
  
  // Relations espace gérant
  managerBookings ManagerBooking[]

  @@map("rooms")
}

model Booking {
  id              String        @id @default(cuid())
  userId          String
  roomId          String
  checkIn         DateTime
  checkOut        DateTime
  guests          Int
  totalAmount     Float
  status          BookingStatus @default(PENDING)
  specialRequests String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  room            Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  payment         Payment[]
  review          Review?

  @@map("bookings")
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String
  amount          Float
  currency        String        @default("EUR")
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?
  stripeId        String?
  paypalId        String?
  errorMessage    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id                 String    @id @default(cuid())
  
  // Relations de base
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  roomId             String  
  room               Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  bookingId          String?   @unique
  booking            Booking?  @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  
  // Contenu de l'avis
  rating             Int
  title              String?
  comment            String?
  
  // Détails supplémentaires
  pros               String[]  @default([])
  cons               String[]  @default([])
  recommendToFriends Boolean?
  
  // Métadonnées
  verified           Boolean   @default(false)
  helpful            Int       @default(0)
  isApproved         Boolean   @default(false)
  
  // Réponse de l'hôtel
  response           String?
  responseDate       DateTime?
  responseBy         String?
  
  // Timestamps
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("reviews")
  @@index([roomId])
  @@index([userId])
  @@index([rating])
  @@index([verified])
  @@index([createdAt])
}

// NOUVEAU MODÈLE: Espace Gérant - Réservations physiques sur place
model ManagerBooking {
  id                String   @id @default(cuid())
  
  // Type de séjour
  type              ManagerBookingType
  
  // Informations client (obligatoires pour séjours prolongés)
  clientFirstName   String?
  clientLastName    String?
  clientPhone       String?
  clientIdType      String?
  clientIdNumber    String?
  
  // Informations chambre
  roomId            String
  room              Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  // Horaires
  checkIn           DateTime
  checkOut          DateTime
  actualCheckOut    DateTime?
  
  // Durée et tarification
  duration          Int
  hourlyRate        Float?
  totalAmount       Float
  
  // Statut et paiement
  status            ManagerBookingStatus @default(ACTIVE)
  paymentMethod     String   @default("CASH")
  paymentReceived   Boolean  @default(true)
  
  // Métadonnées
  receiptNumber     String   @unique
  notes             String?
  
  // Suivi dépassements
  isExpired         Boolean  @default(false)
  overtimeMinutes   Int?
  overtimeCharge    Float?
  
  // Gérant responsable
  managerId         String
  manager           User     @relation(fields: [managerId], references: [id], onDelete: Restrict)
  
  // Relations
  activityLogs      ManagerActivityLog[]
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("manager_bookings")
  @@index([roomId])
  @@index([status])
  @@index([type])
  @@index([managerId])
  @@index([createdAt])
  @@index([checkOut])
}

// NOUVEAU MODÈLE: Log d'activité espace gérant
model ManagerActivityLog {
  id          String   @id @default(cuid())
  
  // Type d'activité
  action      ManagerAction
  
  // Référence réservation
  bookingId   String?
  booking     ManagerBooking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  
  // Détails
  description String
  details     Json?
  
  // Gérant responsable
  managerId   String
  manager     User     @relation(fields: [managerId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime @default(now())

  @@map("manager_activity_logs")
  @@index([managerId])
  @@index([action])
  @@index([createdAt])
}

// Enums existants étendus
enum Role {
  CLIENT
  ADMIN
  STAFF
  MANAGER
}

enum RoomType {
  SINGLE
  DOUBLE
  SUITE
  FAMILY
  DELUXE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  CHECKED_IN
  CHECKED_OUT
  COMPLETED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  ORANGE_MONEY
  WAVE
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// NOUVEAUX ENUMS: Espace Gérant
enum ManagerBookingType {
  HOURLY
  NIGHTLY
  EXTENDED
}

enum ManagerBookingStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  EXTENDED
  CANCELLED
}

enum ManagerAction {
  CHECK_IN
  CHECK_OUT
  EXTEND
  CANCEL
  PAYMENT
  OVERTIME
  CREATE
}

// Ajout enum pour type de climatisation
enum ClimateType {
  CLIMATISE
  VENTILE
}

// Ajout champs climatisation et type chambre pour les réservations
model ManagerBooking {
  // ... autres champs existants ...
  climateType    ClimateType?
  roomType       String?
}
