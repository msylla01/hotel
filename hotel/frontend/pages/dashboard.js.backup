import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import Link from 'next/link'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  CalendarDaysIcon,
  UserIcon,
  CreditCardIcon,
  BellIcon,
  ArrowRightIcon,
  PlusIcon,
  ClockIcon,
  CheckCircleIcon,
  ExclamationTriangleIcon,
  XCircleIcon,
  HomeIcon,
  CogIcon,
  HeartIcon,
  ChartBarIcon,
  EnvelopeIcon,
  PhoneIcon,
  XMarkIcon,
  EyeIcon,
  UserGroupIcon
} from '@heroicons/react/24/outline'
import { StarIcon } from '@heroicons/react/24/solid'
import DeactivatedAccountBanner from '../components/dashboard/DeactivatedAccountBanner'

export default function Dashboard() {
  const router = useRouter()
  const [user, setUser] = useState(null)
  const [loading, setLoading] = useState(true)
  const [bookings, setBookings] = useState([])
  const [stats, setStats] = useState(null)
  const [notifications, setNotifications] = useState([])
  const [favoriteRooms, setFavoriteRooms] = useState([])
  const [showWelcomeBack, setShowWelcomeBack] = useState(false)
  const [dataLoading, setDataLoading] = useState(true)

  useEffect(() => {
    // V√©rifier l'authentification
    const token = localStorage.getItem('hotel_token')
    const userData = localStorage.getItem('hotel_user')
    
    if (!token || !userData) {
      router.push('/auth/login')
      return
    }

    const user = JSON.parse(userData)
    setUser(user)
    
    // V√©rifier si c'est une r√©activation
    if (router.query.reactivated === 'true' || router.query.welcome === 'true') {
      setShowWelcomeBack(true)
      router.replace('/dashboard', undefined, { shallow: true })
    }
    
    fetchRealDashboardData()
  }, [router])

  const handleCancelBooking = async (bookingId, roomName) => {
    console.log('üéØ TENTATIVE ANNULATION [msylla01] - 2025-10-02 01:43:49:', bookingId, roomName)
    
    const confirmCancel = window.confirm(`√ätes-vous s√ªr de vouloir annuler votre r√©servation pour "${roomName}" ?\n\nCette action est irr√©versible.`)
    
    if (!confirmCancel) {
      console.log('‚ùå Annulation annul√©e par utilisateur [msylla01]')
      return
    }
    
    const reason = window.prompt("Raison de l'annulation (optionnel):", "") || "Annulation depuis le dashboard"
    
    try {
      console.log('üì° Envoi requ√™te annulation [msylla01]:', {
        bookingId,
        reason,
        url: `http://localhost:5000/api/bookings/${bookingId}/cancel`
      })
      
      const token = localStorage.getItem('hotel_token')
      
      if (!token) {
        alert('‚ùå Token manquant - Reconnectez-vous')
        router.push('/auth/login')
        return
      }
      
      const response = await fetch(`http://localhost:5000/api/bookings/${bookingId}/cancel`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ reason })
      })
      
      console.log('üì° Response status [msylla01]:', response.status, response.ok)
      
      const data = await response.json()
      console.log('üìä Response data [msylla01]:', data)
      
      if (data.success) {
        alert(`‚úÖ R√©servation annul√©e avec succ√®s !\n\nR√©f√©rence: ${bookingId}\nChambre: ${roomName}\nRaison: ${reason}`)
        console.log('‚úÖ ANNULATION R√âUSSIE [msylla01]:', bookingId)
        fetchRealDashboardData() // Recharger les donn√©es
      } else {
        console.error('‚ùå ERREUR ANNULATION [msylla01]:', data.message)
        alert(`‚ùå Erreur: ${data.message}`)
      }
      
    } catch (error) {
      console.error('‚ùå ERREUR R√âSEAU ANNULATION [msylla01]:', error)
      alert(`‚ùå Erreur de connexion: ${error.message}\n\nV√©rifiez que le backend est d√©marr√© sur http://localhost:5000`)
    }
  }

  const handleReactivate = (reactivatedUser) => {
    setUser(reactivatedUser)
    setShowWelcomeBack(true)
  }

  const fetchRealDashboardData = async () => {
    try {
      setDataLoading(true)
      const token = localStorage.getItem('hotel_token')
      
      if (!token) {
        router.push('/auth/login')
        return
      }

      console.log('üìä R√©cup√©ration donn√©es dashboard DB R√âELLES [msylla01] - 2025-10-02 01:43:49')

      const [bookingsResponse, statsResponse] = await Promise.all([
        fetch('http://localhost:5000/api/bookings', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }),
        fetch('http://localhost:5000/api/bookings/stats', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        })
      ])

      if (bookingsResponse.ok) {
        const bookingsData = await bookingsResponse.json()
        if (bookingsData.success) {
          setBookings(bookingsData.bookings)
          console.log(`‚úÖ ${bookingsData.bookings.length} r√©servations DB r√©cup√©r√©es [msylla01]`)
        } else {
          throw new Error(bookingsData.message)
        }
      } else {
        throw new Error(`Erreur bookings: ${bookingsResponse.status}`)
      }

      if (statsResponse.ok) {
        const statsData = await statsResponse.json()
        if (statsData.success) {
          setStats(statsData.stats)
          console.log('‚úÖ Stats DB r√©cup√©r√©es [msylla01]:', statsData.stats)
        } else {
          throw new Error(statsData.message)
        }
      } else {
        throw new Error(`Erreur stats: ${statsResponse.status}`)
      }

      const mockNotifications = user?.isActive ? [
        {
          id: 1,
          type: 'booking',
          title: 'Donn√©es synchronis√©es',
          message: 'Toutes vos donn√©es proviennent de la base PostgreSQL',
          date: new Date().toISOString(),
          read: false,
          icon: CheckCircleIcon,
          color: 'text-green-600'
        }
      ] : [
        {
          id: 1,
          type: 'account',
          title: 'Compte d√©sactiv√©',
          message: 'R√©activez votre compte pour effectuer des r√©servations',
          date: new Date().toISOString(),
          read: false,
          icon: ExclamationTriangleIcon,
          color: 'text-orange-600'
        }
      ]

      setNotifications(mockNotifications)
      
      // Charger les favoris depuis localStorage
      const savedFavorites = localStorage.getItem('hotel_favorites')
      if (savedFavorites) {
        try {
          const favorites = JSON.parse(savedFavorites)
          setFavoriteRooms(favorites)
        } catch (e) {
          setFavoriteRooms([])
        }
      } else {
        setFavoriteRooms([])
      }

    } catch (error) {
      console.error('‚ùå Erreur chargement dashboard DB [msylla01]:', error)
      setBookings([])
      setStats({
        totalBookings: 0,
        totalSpent: 0,
        upcomingStays: 0,
        completedStays: 0,
        loyaltyPoints: 0,
        favoriteRooms: 0
      })
    } finally {
      setDataLoading(false)
      setLoading(false)
    }
  }

  const handleLogout = () => {
    localStorage.removeItem('hotel_token')
    localStorage.removeItem('hotel_user')
    router.push('/')
  }

  const getStatusBadge = (status) => {
    const statusConfig = {
      'CONFIRMED': { bg: 'bg-green-100', text: 'text-green-800', label: '‚úÖ Confirm√©e' },
      'PENDING': { bg: 'bg-yellow-100', text: 'text-yellow-800', label: '‚è≥ En attente' },
      'CANCELLED': { bg: 'bg-red-100', text: 'text-red-800', label: '‚ùå Annul√©e' },
      'COMPLETED': { bg: 'bg-blue-100', text: 'text-blue-800', label: '‚ú® Termin√©e' }
    }
    
    const config = statusConfig[status] || statusConfig['PENDING']
    return (
      <span className={`inline-flex px-3 py-1 text-xs font-medium rounded-full ${config.bg} ${config.text}`}>
        {config.label}
      </span>
    )
  }

  const getPaymentBadge = (paymentStatus) => {
    const paymentConfig = {
      'PAID': { bg: 'bg-green-100', text: 'text-green-800', label: 'üí≥ Pay√©' },
      'PENDING': { bg: 'bg-orange-100', text: 'text-orange-800', label: 'üí∞ En attente' },
      'FAILED': { bg: 'bg-red-100', text: 'text-red-800', label: '‚ùå √âchec' },
      'COMPLETED': { bg: 'bg-green-100', text: 'text-green-800', label: 'üí≥ Pay√©' }
    }
    
    const config = paymentConfig[paymentStatus] || paymentConfig['PENDING']
    return (
      <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${config.bg} ${config.text}`}>
        {config.label}
      </span>
    )
  }

  const markNotificationRead = (notificationId) => {
    setNotifications(prev => 
      prev.map(notif => 
        notif.id === notificationId ? { ...notif, read: true } : notif
      )
    )
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Chargement de vos donn√©es...</p>
          <p className="text-xs text-gray-500 mt-2">msylla01 ‚Ä¢ 2025-10-02 01:43:49</p>
        </div>
      </div>
    )
  }

  if (!user) {
    return null
  }

  return (
    <>
      <Head>
        <title>Mon Espace - Hotel Luxe</title>
        <meta name="description" content="Votre espace personnel Hotel Luxe avec vraies donn√©es" />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow-sm sticky top-0 z-50">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-4">
              <div className="flex items-center space-x-4">
                <Link href="/" className="flex items-center space-x-2">
                  <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-blue-800 rounded-lg flex items-center justify-center">
                    <span className="text-white font-bold text-lg">H</span>
                  </div>
                  <div>
                    <h1 className="text-xl font-bold text-gray-900">Hotel Luxe</h1>
                    <p className="text-xs text-gray-500">Dashboard R√âEL</p>
                  </div>
                </Link>
              </div>

              <nav className="hidden md:flex items-center space-x-6">
                <Link href="/rooms" className="text-gray-600 hover:text-blue-600 transition-colors">
                  Chambres
                </Link>
                <Link href="/favorites" className="text-gray-600 hover:text-pink-600 transition-colors">
                  ‚ù§Ô∏è Favoris ({favoriteRooms.length})
                </Link>
                <Link href="/services" className="text-gray-600 hover:text-blue-600 transition-colors">
                  Services
                </Link>
                <Link href="/contact" className="text-gray-600 hover:text-blue-600 transition-colors">
                  Contact
                </Link>
              </nav>

              <div className="flex items-center space-x-4">
                <div className="relative">
                  <button className="p-2 text-gray-400 hover:text-gray-600 relative">
                    <BellIcon className="h-6 w-6" />
                    {notifications.filter(n => !n.read).length > 0 && (
                      <span className="absolute -top-1 -right-1 h-4 w-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                        {notifications.filter(n => !n.read).length}
                      </span>
                    )}
                  </button>
                </div>
                
                <div className="flex items-center space-x-3">
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    user.isActive ? 'bg-blue-600' : 'bg-orange-500'
                  }`}>
                    <span className="text-white text-sm font-medium">
                      {user.firstName?.[0]}{user.lastName?.[0]}
                    </span>
                  </div>
                  <div className="hidden md:block">
                    <p className="text-sm font-medium text-gray-900 flex items-center space-x-2">
                      <span>{user.firstName} {user.lastName}</span>
                      {!user.isActive && (
                        <span className="text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded-full">
                          D√©sactiv√©
                        </span>
                      )}
                    </p>
                    <p className="text-xs text-gray-500">{user.email}</p>
                  </div>
                </div>
                
                <button
                  onClick={handleLogout}
                  className="ml-4 px-4 py-2 text-sm text-gray-600 hover:text-gray-900 transition-colors"
                >
                  D√©connexion
                </button>
              </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          
          {/* Message de bienvenue apr√®s r√©activation */}
          <AnimatePresence>
            {showWelcomeBack && user.isActive && (
              <motion.div
                initial={{ opacity: 0, y: -20, scale: 0.95 }}
                animate={{ opacity: 1, y: 0, scale: 1 }}
                exit={{ opacity: 0, y: -20, scale: 0.95 }}
                className="bg-green-50 border border-green-200 rounded-lg p-6 mb-6 relative"
              >
                <button
                  onClick={() => setShowWelcomeBack(false)}
                  className="absolute top-4 right-4 text-green-500 hover:text-green-700"
                >
                  <XMarkIcon className="w-5 h-5" />
                </button>
                
                <div className="flex items-start space-x-3">
                  <CheckCircleIcon className="w-8 h-8 text-green-600 mt-1" />
                  <div>
                    <h3 className="text-green-900 font-bold text-lg mb-2">
                      üéâ Bon retour parmi nous, {user.firstName} !
                    </h3>
                    <p className="text-green-700 mb-3">
                      Votre compte a √©t√© r√©activ√© avec succ√®s ! Vous avez maintenant acc√®s √† toutes les fonctionnalit√©s.
                    </p>
                    <div className="mt-4">
                      <Link
                        href="/rooms"
                        className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors inline-flex items-center space-x-2"
                      >
                        <PlusIcon className="w-4 h-4" />
                        <span>Faire une r√©servation</span>
                      </Link>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Banner de compte d√©sactiv√© */}
          {!user.isActive && (
            <DeactivatedAccountBanner user={user} onReactivate={handleReactivate} />
          )}

          {/* Welcome Section */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className={`rounded-2xl p-8 text-white mb-8 ${
              user.isActive 
                ? 'bg-gradient-to-r from-blue-600 to-blue-800' 
                : 'bg-gradient-to-r from-orange-600 to-orange-800'
            }`}
          >
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold mb-2">
                  Bienvenue, {user.firstName} ! üëã
                  {!user.isActive && ' (Compte d√©sactiv√©)'}
                </h1>
                <p className={`${user.isActive ? 'text-blue-100' : 'text-orange-100'} mb-4`}>
                  {user.isActive 
                    ? 'Vos donn√©es de r√©servations sont mises √† jour en temps r√©el'
                    : 'Votre compte est temporairement d√©sactiv√©. Vous pouvez consulter vos informations et r√©activer √† tout moment.'
                  }
                </p>
                <div className="flex items-center space-x-6 text-sm text-blue-100">
                  <div>
                    <span className="block text-white font-semibold">{stats?.loyaltyPoints || 0}</span>
                    <span>Points fid√©lit√©</span>
                  </div>
                  <div>
                    <span className="block text-white font-semibold">
                      {stats?.memberSince ? new Date(stats.memberSince).getFullYear() : '2024'}
                    </span>
                    <span>Membre depuis</span>
                  </div>
                  <div>
                    <span className="block text-white font-semibold">R√âEL</span>
                    <span>Donn√©es live</span>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>

          {/* Stats Cards - DONN√âES R√âELLES */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {[
              {
                title: 'Mes R√©servations',
                value: stats?.totalBookings || 0,
                change: 'Total r√©el',
                icon: CalendarDaysIcon,
                color: 'from-blue-500 to-blue-600'
              },
              {
                title: 'Total D√©pens√©',
                value: `${stats?.totalSpent || 0}‚Ç¨`,
                change: 'Montant r√©el',
                icon: CreditCardIcon,
                color: 'from-green-500 to-green-600'
              },
              {
                title: 'S√©jours √† Venir',
                value: stats?.upcomingStays || 0,
                change: 'Confirm√©s',
                icon: ClockIcon,
                color: 'from-purple-500 to-purple-600'
              },
              {
                title: 'S√©jours Termin√©s',
                value: stats?.completedStays || 0,
                change: 'Historique',
                icon: CheckCircleIcon,
                color: 'from-indigo-500 to-indigo-600'
              }
            ].map((stat, index) => (
              <motion.div
                key={stat.title}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className="bg-white rounded-2xl shadow-sm overflow-hidden"
              >
                <div className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600 mb-1">
                        {stat.title}
                      </p>
                      <p className="text-3xl font-bold text-gray-900">
                        {stat.value}
                      </p>
                      <p className="text-sm text-gray-500 mt-1">
                        {stat.change}
                      </p>
                    </div>
                    
                    <div className={`p-3 rounded-xl bg-gradient-to-r ${stat.color}`}>
                      <stat.icon className="w-6 h-6 text-white" />
                    </div>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>

          {/* Main Content Grid */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            
            {/* Left Column - VRAIES R√âSERVATIONS */}
            <div className="lg:col-span-2 space-y-8">
              
              {/* Recent Bookings - DONN√âES R√âELLES */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.4 }}
                className="bg-white rounded-2xl shadow-sm p-6"
              >
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-900">
                    üìÖ Mes R√©servations R√âELLES ({bookings.length})
                  </h2>
                  {user.isActive ? (
                    <Link
                      href="/rooms"
                      className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
                    >
                      <PlusIcon className="w-4 h-4" />
                      <span>Nouvelle r√©servation</span>
                    </Link>
                  ) : (
                    <div className="text-orange-600 text-sm">
                      R√©activez pour r√©server
                    </div>
                  )}
                </div>

                {dataLoading ? (
                  <div className="text-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
                    <p className="text-gray-600">Chargement des r√©servations...</p>
                  </div>
                ) : bookings.length > 0 ? (
                  <div className="space-y-4">
                    {bookings.map((booking) => (
                      <div key={booking.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-lg transition-shadow bg-gradient-to-r from-white to-gray-50">
                        <div className="flex items-start space-x-4">
                          {/* Image de la chambre R√âELLE */}
                          <div className="w-24 h-20 bg-gray-200 rounded-lg overflow-hidden flex-shrink-0">
                            <img
                              src={booking.roomImage}
                              alt={booking.room.name}
                              className="w-full h-full object-cover"
                              onError={(e) => {
                                e.target.src = 'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=400'
                              }}
                            />
                          </div>

                          {/* D√©tails R√âELS */}
                          <div className="flex-1">
                            <div className="flex items-center justify-between mb-3">
                              <div>
                                <h3 className="font-semibold text-gray-900 text-lg">{booking.room.name}</h3>
                                <p className="text-sm text-gray-500">#{booking.id}</p>
                                <p className="text-xs text-blue-600">{booking.room.type} ‚Ä¢ {booking.room.size}m¬≤</p>
                              </div>
                              <div className="flex flex-col items-end space-y-1">
                                {getStatusBadge(booking.status)}
                                {getPaymentBadge(booking.paymentStatus)}
                              </div>
                            </div>
                            
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-sm mb-3">
                              <div className="bg-blue-50 p-2 rounded">
                                <span className="text-blue-600 font-medium block">Arriv√©e</span>
                                <p className="font-bold text-gray-900">{new Date(booking.checkIn).toLocaleDateString('fr-FR')}</p>
                              </div>
                              <div className="bg-green-50 p-2 rounded">
                                <span className="text-green-600 font-medium block">D√©part</span>
                                <p className="font-bold text-gray-900">{new Date(booking.checkOut).toLocaleDateString('fr-FR')}</p>
                              </div>
                              <div className="bg-purple-50 p-2 rounded">
                                <span className="text-purple-600 font-medium block">Personnes</span>
                                <p className="font-bold text-gray-900">{booking.guests}</p>
                              </div>
                              <div className="bg-orange-50 p-2 rounded">
                                <span className="text-orange-600 font-medium block">Total</span>
                                <p className="font-bold text-blue-600">{booking.totalAmount}‚Ç¨</p>
                                <p className="text-xs text-gray-500">{booking.nights} nuit(s)</p>
                              </div>
                            </div>

                            {/* Demandes sp√©ciales */}
                            {booking.specialRequests && (
                              <div className="bg-gray-50 p-2 rounded mb-3">
                                <p className="text-xs text-gray-600">
                                  <strong>Demandes sp√©ciales:</strong> {booking.specialRequests}
                                </p>
                              </div>
                            )}

                            <div className="flex items-center justify-between pt-3 border-t border-gray-100">
                              <div className="flex space-x-2">
                                <Link
                                  href={`/bookings/${booking.id}`}
                                  className="text-blue-600 hover:text-blue-700 text-xs font-medium flex items-center space-x-1 hover:bg-blue-50 px-2 py-1 rounded"
                                >
                                  <EyeIcon className="w-3 h-3" />
                                  <span>D√©tails</span>
                                </Link>
                                
                                {booking.status === 'PENDING' && booking.paymentStatus === 'PENDING' && user.isActive && (
                                  <Link
                                    href={`/bookings/${booking.id}#payment`}
                                    className="text-green-600 hover:text-green-700 text-xs font-medium hover:bg-green-50 px-2 py-1 rounded"
                                  >
                                  <button
                                    onClick={() => {
                                      window.location.href = `/bookings/${booking.id}#payment`
                                    }}
                                    className="text-green-600 hover:text-green-700 text-xs font-medium hover:bg-green-50 px-2 py-1 rounded"
                                  >
                                    üí≥ Payer ({booking.totalAmount}‚Ç¨)
                                  </button>
                                  </Link>
                                )}
                                
                                {booking.status !== 'CANCELLED' && booking.canCancel && user.isActive && (
                                  <button 
                                    onClick={() => handleCancelBooking(booking.id, booking.room.name)}
                                    className="text-red-600 hover:text-red-700 text-xs font-medium hover:bg-red-50 px-2 py-1 rounded"
                                  >
                                    ‚ùå Annuler
                                  </button>
                                )}
                                  <button 
                                    onClick={() => handleCancelBooking(booking.id, booking.room.name)}
                                    className="text-red-600 hover:text-red-700 text-xs font-medium hover:bg-red-50 px-2 py-1 rounded"
                                  >
                                    ‚ùå Annuler
                                  </button>
                                )}
                                
                                {booking.status === 'CONFIRMED' && (
                                  <span className="text-green-600 text-xs font-medium px-2 py-1 bg-green-50 rounded">
                                    ‚úÖ Confirm√©e
                                  </span>
                                )}
                                
                                {booking.status === 'CANCELLED' && (
                                  <span className="text-red-600 text-xs font-medium px-2 py-1 bg-red-50 rounded">
                                    ‚ùå Annul√©e
                                  </span>
                                )}
                              </div>
                              
                              <div className="text-xs text-gray-500 text-right">
                                <div>#{booking.id.slice(-8)}</div>
                                <div>{new Date(booking.createdAt).toLocaleDateString('fr-FR')}</div>
                                {booking.canCancel && booking.status !== 'CANCELLED' && (
                                  <div className="text-green-600">Annulable</div>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-12 bg-gradient-to-b from-gray-50 to-white rounded-lg">
                    <CalendarDaysIcon className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                    <h3 className="text-xl font-medium text-gray-900 mb-2">
                      Aucune r√©servation trouv√©e
                    </h3>
                    <p className="text-gray-600 mb-6">
                      Vous n'avez pas encore de r√©servation. D√©couvrez nos chambres exceptionnelles !
                    </p>
                    {user.isActive ? (
                      <Link
                        href="/rooms"
                        className="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-semibold"
                      >
                        <PlusIcon className="h-5 w-5 mr-2" />
                        Faire ma premi√®re r√©servation
                      </Link>
                    ) : (
                      <p className="text-orange-600 text-sm">
                        R√©activez votre compte pour pouvoir r√©server
                      </p>
                    )}
                  </div>
                )}
              </motion.div>

              {/* Notifications */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.5 }}
                className="bg-white rounded-2xl shadow-sm p-6"
              >
                <h2 className="text-xl font-semibold text-gray-900 mb-6">
                  üîî Notifications ({notifications.filter(n => !n.read).length} non lues)
                </h2>

                {notifications.length > 0 ? (
                  <div className="space-y-4">
                    {notifications.map((notification) => (
                      <div
                        key={notification.id}
                        className={`p-4 rounded-lg border transition-colors cursor-pointer ${
                          notification.read 
                            ? 'border-gray-200 bg-gray-50' 
                            : 'border-blue-200 bg-blue-50 shadow-sm'
                        }`}
                        onClick={() => markNotificationRead(notification.id)}
                      >
                        <div className="flex items-start space-x-3">
                          <div className={`p-2 rounded-full bg-white shadow-sm`}>
                            <notification.icon className={`w-4 h-4 ${notification.color}`} />
                          </div>
                          <div className="flex-1">
                            <h4 className="font-medium text-gray-900">{notification.title}</h4>
                            <p className="text-sm text-gray-600 mt-1">{notification.message}</p>
                            <p className="text-xs text-gray-500 mt-2">
                              {new Date(notification.date).toLocaleDateString('fr-FR')}
                            </p>
                          </div>
                          {!notification.read && (
                            <div className="w-3 h-3 bg-blue-600 rounded-full"></div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <BellIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-600">Aucune notification</p>
                  </div>
                )}
              </motion.div>
            </div>

            {/* Right Column - Profile & Quick Actions */}
            <div className="space-y-8">
              
              {/* Profile Summary */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.6 }}
                className="bg-white rounded-2xl shadow-sm p-6"
              >
                <h3 className="text-lg font-semibold text-gray-900 mb-4">üë§ Mon Profil</h3>
                
                <div className="text-center mb-6">
                  <div className={`w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-3 ${
                    user.isActive ? 'bg-blue-600' : 'bg-orange-500'
                  }`}>
                    <span className="text-white text-2xl font-bold">
                      {user.firstName?.[0]}{user.lastName?.[0]}
                    </span>
                  </div>
                  <h4 className="font-semibold text-gray-900">{user.firstName} {user.lastName}</h4>
                  <p className="text-gray-600 text-sm">{user.email}</p>
                  <p className="text-xs text-gray-500 mt-1">
                    Membre depuis {stats?.memberSince ? new Date(stats.memberSince).getFullYear() : '2024'}
                  </p>
                  {stats?.loyaltyPoints > 0 && (
                    <div className="mt-2 inline-flex items-center px-3 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">
                      ‚≠ê {stats.loyaltyPoints} points fid√©lit√©
                    </div>
                  )}
                </div>

                <div className="space-y-3">
                  <Link
                    href="/profile"
                    className="w-full flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors"
                  >
                    <div className="flex items-center space-x-3">
                      <UserIcon className="w-5 h-5 text-gray-400" />
                      <span className="text-sm font-medium">Modifier mon profil</span>
                    </div>
                    <ArrowRightIcon className="w-4 h-4 text-gray-400" />
                  </Link>

                  <Link
                    href="/favorites"
                    className="w-full flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:border-pink-300 hover:bg-pink-50 transition-colors"
                  >
                    <div className="flex items-center space-x-3">
                      <HeartIcon className="w-5 h-5 text-pink-400" />
                      <span className="text-sm font-medium">Mes chambres favorites</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-xs bg-pink-100 text-pink-800 px-2 py-1 rounded-full">
                        {favoriteRooms.length}
                      </span>
                      <ArrowRightIcon className="w-4 h-4 text-gray-400" />
                    </div>
                  </Link>

                  <Link
                    href="/profile/loyalty"
                    className="w-full flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors"
                  >
                    <div className="flex items-center space-x-3">
                      <StarIcon className="w-5 h-5 text-yellow-400" />
                      <span className="text-sm font-medium">Programme fid√©lit√©</span>
                    </div>
                    <ArrowRightIcon className="w-4 h-4 text-gray-400" />
                  </Link>
                </div>
              </motion.div>

              {/* Quick Actions */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.8 }}
                className="bg-white rounded-2xl shadow-sm p-6"
              >
                <h3 className="text-lg font-semibold text-gray-900 mb-4">‚ö° Actions Rapides</h3>
                
                <div className="space-y-3">
                  {user.isActive ? (
                    <Link
                      href="/rooms"
                      className="w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors text-center block"
                    >
                      üè® R√©server une chambre
                    </Link>
                  ) : (
                    <div className="w-full bg-orange-100 text-orange-800 py-3 rounded-lg font-medium text-center">
                      üö´ R√©activez votre compte pour r√©server
                    </div>
                  )}
                  
                  <Link
                    href="/favorites"
                    className="w-full border border-pink-300 text-pink-700 py-3 rounded-lg font-medium hover:bg-pink-50 transition-colors text-center block"
                  >
                    ‚ù§Ô∏è Mes Favoris ({favoriteRooms.length})
                  </Link>
                  
                  <Link
                    href="/services"
                    className="w-full border border-gray-300 text-gray-700 py-3 rounded-lg font-medium hover:bg-gray-50 transition-colors text-center block"
                  >
                    üíÜ‚Äç‚ôÄÔ∏è Services & Spa
                  </Link>

                  <div className="grid grid-cols-2 gap-2">
                    <Link
                      href="/contact"
                      className="flex items-center justify-center p-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                    >
                      <PhoneIcon className="w-4 h-4 text-gray-600 mr-2" />
                      <span className="text-sm">Contact</span>
                    </Link>
                    <Link
                      href="/support"
                      className="flex items-center justify-center p-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                    >
                      <EnvelopeIcon className="w-4 h-4 text-gray-600 mr-2" />
                      <span className="text-sm">Support</span>
                    </Link>
                  </div>

                  {/* Statistiques rapides */}
                  <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-4 rounded-lg mt-4">
                    <h4 className="font-semibold text-gray-900 mb-3 text-center">üìä Mes Stats</h4>
                    <div className="grid grid-cols-2 gap-3 text-center">
                      <div>
                        <div className="text-lg font-bold text-blue-600">{stats?.totalBookings || 0}</div>
                        <div className="text-xs text-gray-600">R√©servations</div>
                      </div>
                      <div>
                        <div className="text-lg font-bold text-green-600">{stats?.totalSpent || 0}‚Ç¨</div>
                        <div className="text-xs text-gray-600">D√©pens√©</div>
                      </div>
                      <div>
                        <div className="text-lg font-bold text-purple-600">{stats?.upcomingStays || 0}</div>
                        <div className="text-xs text-gray-600">√Ä venir</div>
                      </div>
                      <div>
                        <div className="text-lg font-bold text-yellow-600">{stats?.loyaltyPoints || 0}</div>
                        <div className="text-xs text-gray-600">Points</div>
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            </div>
          </div>

          {/* Footer */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 1.0 }}
            className="mt-16 text-center text-gray-500"
          >
            <p className="text-sm">
              Dashboard Hotel Luxe ‚Ä¢ Donn√©es r√©elles PostgreSQL ‚Ä¢ Annulation et d√©tails fonctionnels ‚Ä¢ msylla01 ‚Ä¢ 2025-10-02 01:43:49 UTC
            </p>
          </motion.div>
        </main>
      </div>
    </>
  )
}
