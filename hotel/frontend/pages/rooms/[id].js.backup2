import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import Link from 'next/link'
import { motion } from 'framer-motion'
import { 
  ArrowLeftIcon,
  UsersIcon,
  CheckCircleIcon,
  StarIcon as StarIconOutline,
  CurrencyEuroIcon,
  CalendarDaysIcon,
  HomeIcon,
  WifiIcon,
  TvIcon,
  ShieldCheckIcon,
  HeartIcon,
  ShareIcon,
  MinusIcon,
  PlusIcon
} from '@heroicons/react/24/outline'
import { StarIcon, HeartIcon as HeartIconSolid } from '@heroicons/react/24/solid'
import ReviewsList from '../../components/reviews/ReviewsList'
import CreateReview from '../../components/reviews/CreateReview'

export default function RoomDetail() {
  const router = useRouter()
  const { id } = router.query
  const [user, setUser] = useState(null)
  const [isConnected, setIsConnected] = useState(false)
  const [room, setRoom] = useState(null)
  const [loading, setLoading] = useState(true)
  const [favoriteRooms, setFavoriteRooms] = useState([])
  const [selectedImage, setSelectedImage] = useState(0)
  const [bookingData, setBookingData] = useState({
    checkIn: '',
    checkOut: '',
    guests: 1,
    specialRequests: ''
  })
  const [bookingLoading, setBookingLoading] = useState(false)
  const [bookingError, setBookingError] = useState('')

  useEffect(() => {
    // Vérifier si l'utilisateur est connecté (SANS redirection forcée)
    const token = localStorage.getItem('hotel_token')
    const userData = localStorage.getItem('hotel_user')
    
    if (token && userData) {
      try {
        const user = JSON.parse(userData)
        setUser(user)
        setIsConnected(true)
        console.log('👤 Utilisateur connecté [msylla01] - 2025-10-03 10:21:08:', user.firstName, user.lastName)
        loadFavorites()
      } catch (error) {
        console.log('❌ Erreur parsing user data:', error)
        setIsConnected(false)
      }
    } else {
      setIsConnected(false)
      console.log('👥 Visiteur non connecté [msylla01] - 2025-10-03 10:21:08')
    }
    
    if (id) {
      fetchRoomDetailFromAPI()
    }
  }, [id])

  const loadFavorites = () => {
    if (!isConnected) return
    
    const savedFavorites = localStorage.getItem('hotel_favorites')
    if (savedFavorites) {
      try {
        const favorites = JSON.parse(savedFavorites)
        setFavoriteRooms(favorites)
      } catch (error) {
        setFavoriteRooms([])
      }
    }
  }

  const toggleFavorite = () => {
    if (!isConnected) {
      const confirmLogin = window.confirm('Veuillez vous connecter pour gérer les favoris.\n\nSouhaitez-vous vous connecter maintenant ?')
      if (confirmLogin) {
        router.push(`/auth/login?redirect=/rooms/${room.id}`)
      }
      return
    }

    const isFavorite = favoriteRooms.includes(room.id)
    let newFavorites

    if (isFavorite) {
      newFavorites = favoriteRooms.filter(id => id !== room.id)
      alert(`💔 "${room.name}" retiré des favoris`)
    } else {
      newFavorites = [...favoriteRooms, room.id]
      alert(`❤️ "${room.name}" ajouté aux favoris`)
    }

    setFavoriteRooms(newFavorites)
    localStorage.setItem('hotel_favorites', JSON.stringify(newFavorites))
  }

  const fetchRoomDetailFromAPI = async () => {
    try {
      setLoading(true)
      
      console.log('🏨 Récupération détail chambre API [msylla01] - 2025-10-03 10:21:08:', id)
      
      const response = await fetch(`http://localhost:5000/api/rooms/${id}`)
      
      if (response.ok) {
        const data = await response.json()
        if (data.success) {
          setRoom(data.room)
          console.log('✅ Détail chambre API récupéré [msylla01]:', data.room.name)
        } else {
          console.error('❌ Erreur API rooms [msylla01]:', data.message)
          fetchRoomDetailFallback()
        }
      } else {
        console.error('❌ Erreur HTTP API rooms [msylla01]:', response.status)
        fetchRoomDetailFallback()
      }

    } catch (error) {
      console.error('❌ Erreur réseau API rooms [msylla01]:', error)
      fetchRoomDetailFallback()
    } finally {
      setLoading(false)
    }
  }

  const fetchRoomDetailFallback = () => {
    console.log('🔄 Utilisation données fallback [msylla01]')
    
    const mockRooms = {
      'room_1': {
        id: 'room_1',
        name: 'Chambre Simple Confort',
        description: 'Une chambre élégante et fonctionnelle pour un séjour en solo. Parfaitement équipée avec un lit simple, un bureau et tout le confort moderne.',
        type: 'SINGLE',
        price: 120,
        capacity: 1,
        size: 22,
        images: [
          'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=800',
          'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=800'
        ],
        amenities: [
          'WiFi gratuit haut débit',
          'TV écran plat 43"',
          'Climatisation individuelle',
          'Coffre-fort numérique',
          'Salle de bain privée avec douche',
          'Minibar',
          'Bureau de travail',
          'Téléphone direct'
        ],
        rating: 4.2,
        reviewCount: 45,
        available: true
      },
      'room_2': {
        id: 'room_2',
        name: 'Chambre Double Prestige',
        description: 'Spacieuse chambre double avec balcon privé offrant une vue imprenable. Idéale pour les couples recherchant confort et romantisme.',
        type: 'DOUBLE',
        price: 180,
        capacity: 2,
        size: 28,
        images: [
          'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=800',
          'https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?w=800'
        ],
        amenities: [
          'WiFi gratuit haut débit',
          'TV écran plat 50"',
          'Climatisation individuelle',
          'Balcon privé avec vue',
          'Lit king size',
          'Minibar premium',
          'Coffre-fort numérique',
          'Salle de bain avec baignoire'
        ],
        rating: 4.5,
        reviewCount: 128,
        available: true
      },
      'room_3': {
        id: 'room_3',
        name: 'Suite Junior Executive',
        description: 'Suite élégante avec salon séparé, parfaite pour les voyages d\'affaires ou les séjours prolongés.',
        type: 'SUITE',
        price: 350,
        capacity: 2,
        size: 45,
        images: [
          'https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?w=800',
          'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=800'
        ],
        amenities: [
          'WiFi gratuit haut débit',
          'TV écran plat 55"',
          'Climatisation multi-zones',
          'Salon séparé',
          'Bureau executive',
          'Machine à café Nespresso',
          'Service butler disponible'
        ],
        rating: 4.8,
        reviewCount: 89,
        available: true
      },
      'room_4': {
        id: 'room_4',
        name: 'Chambre Familiale Spacieuse',
        description: 'Chambre parfaite pour les familles avec enfants. Espace optimisé avec lits superposés et coin jeux.',
        type: 'FAMILY',
        price: 250,
        capacity: 4,
        size: 40,
        images: [
          'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=800',
          'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=800'
        ],
        amenities: [
          'WiFi gratuit haut débit',
          'TV écran plat 50"',
          'Lits superposés enfants',
          'Coin jeux aménagé',
          'Salle de bain familiale',
          'Console de jeux'
        ],
        rating: 4.6,
        reviewCount: 67,
        available: true
      },
      'room_5': {
        id: 'room_5',
        name: 'Suite Présidentielle Deluxe',
        description: 'Notre suite la plus luxueuse avec jacuzzi privé, terrasse et service personnalisé.',
        type: 'DELUXE',
        price: 450,
        capacity: 2,
        size: 65,
        images: [
          'https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?w=800',
          'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=800'
        ],
        amenities: [
          'WiFi gratuit haut débit',
          'TV écran plat 65"',
          'Jacuzzi privé',
          'Terrasse privée',
          'Service butler 24h/24',
          'Transfert VIP inclus'
        ],
        rating: 4.9,
        reviewCount: 34,
        available: true
      }
    }

    const roomData = mockRooms[id]
    if (roomData) {
      setRoom(roomData)
      console.log('✅ Détail chambre fallback chargé [msylla01]:', roomData.name)
    } else {
      console.error('❌ Chambre fallback non trouvée [msylla01]:', id)
      router.push('/rooms')
    }
  }

  const handleBooking = async () => {
    // Vérifier si l'utilisateur est connecté
    if (!isConnected) {
      const confirmLogin = window.confirm(`Pour réserver "${room.name}", vous devez être connecté.\n\nSouhaitez-vous vous connecter maintenant ?`)
      if (confirmLogin) {
        router.push(`/auth/login?redirect=/rooms/${room.id}`)
      }
      return
    }

    // Vérifier si le compte est actif
    if (!user.isActive) {
      const confirmReactivate = window.confirm('Votre compte est désactivé. Vous devez le réactiver pour pouvoir réserver.\n\nSouhaitez-vous réactiver votre compte maintenant ?')
      if (confirmReactivate) {
        router.push('/auth/reactivate')
      }
      return
    }

    // Validation des données de réservation
    if (!bookingData.checkIn || !bookingData.checkOut) {
      setBookingError('Veuillez sélectionner vos dates de séjour')
      return
    }

    if (new Date(bookingData.checkIn) >= new Date(bookingData.checkOut)) {
      setBookingError('La date de départ doit être après la date d\'arrivée')
      return
    }

    if (bookingData.guests > room.capacity) {
      setBookingError(`Cette chambre peut accueillir maximum ${room.capacity} personne(s)`)
      return
    }

    try {
      setBookingLoading(true)
      setBookingError('')

      // Préparer les dates au bon format ISO
      const checkInDate = new Date(bookingData.checkIn + 'T14:00:00.000Z')
      const checkOutDate = new Date(bookingData.checkOut + 'T11:00:00.000Z')

      const requestData = {
        roomId: room.id,
        checkIn: checkInDate.toISOString(),
        checkOut: checkOutDate.toISOString(),
        guests: parseInt(bookingData.guests),
        specialRequests: bookingData.specialRequests || ''
      }

      console.log('🎯 TENTATIVE RÉSERVATION [msylla01] - 2025-10-03 10:21:08')
      console.log('📋 Données envoyées:', requestData)

      const token = localStorage.getItem('hotel_token')
      
      const response = await fetch('http://localhost:5000/api/bookings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(requestData)
      })

      const data = await response.json()

      if (data.success) {
        console.log('✅ RÉSERVATION RÉUSSIE [msylla01]:', data.booking.id)
        
        const nights = getNights()
        const total = calculateTotal()
        
        alert(`🎉 RÉSERVATION CONFIRMÉE !\n\n` +
              `📋 Référence: ${data.booking.id}\n` +
              `🏨 Chambre: ${room.name}\n` +
              `📅 Du ${bookingData.checkIn} au ${bookingData.checkOut}\n` +
              `🌙 ${nights} nuit(s)\n` +
              `👥 ${bookingData.guests} personne(s)\n` +
              `💰 Total: ${total}€\n\n` +
              `✅ Redirection vers vos réservations...`)
        
        router.push('/dashboard')
      } else {
        console.error('❌ ERREUR RÉSERVATION [msylla01]:', data.message)
        setBookingError(data.message || 'Erreur lors de la réservation')
      }

    } catch (error) {
      console.error('❌ ERREUR RÉSEAU RÉSERVATION [msylla01]:', error)
      setBookingError('Erreur de connexion au serveur')
    } finally {
      setBookingLoading(false)
    }
  }

  const calculateTotal = () => {
    if (!bookingData.checkIn || !bookingData.checkOut) return 0
    
    const checkIn = new Date(bookingData.checkIn)
    const checkOut = new Date(bookingData.checkOut)
    const nights = Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24))
    
    return nights > 0 ? nights * room.price : 0
  }

  const getNights = () => {
    if (!bookingData.checkIn || !bookingData.checkOut) return 0
    
    const checkIn = new Date(bookingData.checkIn)
    const checkOut = new Date(bookingData.checkOut)
    const nights = Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24))
    
    return nights > 0 ? nights : 0
  }

  const getTypeLabel = (type) => {
    const typeLabels = {
      'SINGLE': 'Simple',
      'DOUBLE': 'Double',
      'SUITE': 'Suite',
      'FAMILY': 'Familiale',
      'DELUXE': 'Deluxe'
    }
    return typeLabels[type] || type
  }

  const getTypeColor = (type) => {
    const typeColors = {
      'SINGLE': 'bg-blue-100 text-blue-800',
      'DOUBLE': 'bg-green-100 text-green-800',
      'SUITE': 'bg-purple-100 text-purple-800',
      'FAMILY': 'bg-orange-100 text-orange-800',
      'DELUXE': 'bg-yellow-100 text-yellow-800'
    }
    return typeColors[type] || 'bg-gray-100 text-gray-800'
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Chargement des détails...</p>
          <p className="text-xs text-gray-500 mt-2">msylla01 • 2025-10-03 10:21:08</p>
        </div>
      </div>
    )
  }

  if (!room) {
    return null
  }

  return (
    <>
      <Head>
        <title>{room.name} - Hotel Luxe</title>
        <meta name="description" content={room.description} />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between py-6">
              <Link
                href="/rooms"
                className="flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors"
              >
                <ArrowLeftIcon className="w-5 h-5" />
                <span>Retour aux chambres</span>
              </Link>
              
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                  <span className="text-white font-bold text-sm">H</span>
                </div>
                <span className="font-semibold text-gray-900">Hotel Luxe</span>
              </div>

              <div className="flex items-center space-x-4">
                {isConnected && user ? (
                  <>
                    <span className="text-sm text-gray-600">
                      {user.firstName} {user.lastName}
                    </span>
                    <div className={`text-xs px-2 py-1 rounded-full ${
                      user.isActive 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-orange-100 text-orange-800'
                    }`}>
                      {user.isActive ? '✅ Actif' : '⚠️ Inactif'}
                    </div>
                    <Link
                      href="/dashboard"
                      className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                    >
                      Mon Espace
                    </Link>
                  </>
                ) : (
                  <div className="flex items-center space-x-2">
                    <Link
                      href="/auth/login"
                      className="text-blue-600 hover:text-blue-700 text-sm font-medium"
                    >
                      Se connecter
                    </Link>
                    <Link
                      href="/auth/register"
                      className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 text-sm font-medium"
                    >
                      S'inscrire
                    </Link>
                  </div>
                )}
              </div>
            </div>
          </div>
        </header>

        {/* Message pour visiteurs non connectés */}
        {!isConnected && (
          <div className="bg-blue-50 border-l-4 border-blue-400 p-4">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
              <div className="flex">
                <div className="ml-3">
                  <p className="text-blue-700">
                    👀 Vous consultez cette chambre en tant que visiteur. 
                    <Link href="/auth/login" className="font-medium underline ml-1">
                      Connectez-vous
                    </Link> pour la réserver ou l'ajouter à vos favoris.
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Message pour compte inactif */}
        {isConnected && user && !user.isActive && (
          <div className="bg-orange-50 border-l-4 border-orange-400 p-4">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
              <div className="flex">
                <div className="ml-3">
                  <p className="text-orange-700">
                    ⚠️ Votre compte est désactivé. 
                    <Link href="/auth/reactivate" className="font-medium underline ml-1">
                      Réactivez-le
                    </Link> pour pouvoir réserver cette chambre.
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Main Content */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            
            {/* Colonne principale - Images et détails */}
            <div className="lg:col-span-2 space-y-8">
              
              {/* Images */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-white rounded-2xl shadow-sm overflow-hidden"
              >
                {/* Image principale */}
                <div className="relative h-96 overflow-hidden">
                  <img
                    src={room.images && room.images[selectedImage] ? room.images[selectedImage] : 'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=800'}
                    alt={room.name}
                    className="w-full h-full object-cover"
                    onError={(e) => {
                      e.target.src = 'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=800'
                    }}
                  />
                  
                  {/* Badges */}
                  <div className="absolute top-4 left-4 flex space-x-2">
                    <span className={`px-3 py-1 text-sm font-medium rounded-full ${getTypeColor(room.type)}`}>
                      {getTypeLabel(room.type)}
                    </span>
                    {room.available && (
                      <div className="bg-green-100 text-green-800 px-3 py-1 text-sm font-medium rounded-full flex items-center space-x-1">
                        <CheckCircleIcon className="w-4 h-4" />
                        <span>Disponible</span>
                      </div>
                    )}
                  </div>

                  {/* Bouton favori */}
                  <div className="absolute top-4 right-4">
                    <button
                      onClick={toggleFavorite}
                      className={`p-2 rounded-full shadow-lg transition-colors ${
                        isConnected && favoriteRooms.includes(room.id)
                          ? 'bg-red-500 text-white'
                          : 'bg-white text-gray-600 hover:text-red-500'
                      }`}
                      title={isConnected ? 
                        (favoriteRooms.includes(room.id) ? 'Retirer des favoris' : 'Ajouter aux favoris') : 
                        'Se connecter pour favoris'
                      }
                    >
                      {isConnected && favoriteRooms.includes(room.id) ? (
                        <HeartIconSolid className="w-5 h-5" />
                      ) : (
                        <HeartIcon className="w-5 h-5" />
                      )}
                    </button>
                  </div>
                </div>

                {/* Miniatures */}
                {room.images && room.images.length > 1 && (
                  <div className="p-4">
                    <div className="flex space-x-2 overflow-x-auto">
                      {room.images.map((image, index) => (
                        <button
                          key={index}
                          onClick={() => setSelectedImage(index)}
                          className={`flex-shrink-0 w-20 h-16 rounded-lg overflow-hidden border-2 transition-colors ${
                            selectedImage === index 
                              ? 'border-blue-500' 
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                        >
                          <img
                            src={image}
                            alt={`${room.name} ${index + 1}`}
                            className="w-full h-full object-cover"
                            onError={(e) => {
                              e.target.src = 'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=400'
                            }}
                          />
                        </button>
                      ))}
                    </div>
                  </div>
                )}
              </motion.div>

              {/* Détails de la chambre */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
                className="bg-white rounded-2xl shadow-sm p-8"
              >
                <div className="flex items-start justify-between mb-6">
                  <div>
                    <h1 className="text-3xl font-bold text-gray-900 mb-2">
                      {room.name}
                      {isConnected && favoriteRooms.includes(room.id) && (
                        <HeartIconSolid className="w-8 h-8 text-red-500 inline ml-3" />
                      )}
                    </h1>
                    <div className="flex items-center space-x-6 text-gray-600">
                      <div className="flex items-center space-x-1">
                        <UsersIcon className="w-5 h-5" />
                        <span>{room.capacity} personne(s) max</span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <HomeIcon className="w-5 h-5" />
                        <span>{room.size}m²</span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <StarIcon className="w-5 h-5 text-yellow-400" />
                        <span>{room.rating}/5 ({room.reviewCount || 0} avis)</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="text-right">
                    <div className="text-3xl font-bold text-blue-600">
                      {room.price}€
                    </div>
                    <div className="text-gray-500">par nuit</div>
                  </div>
                </div>

                <p className="text-gray-700 leading-relaxed mb-8">
                  {room.description}
                </p>

                {/* Équipements */}
                <div className="mb-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">
                    ⚡ Équipements et services
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {room.amenities && room.amenities.map((amenity, index) => (
                      <div key={index} className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <span className="text-gray-700 text-sm">{amenity}</span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Avis */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">
                    ⭐ Note et avis clients
                  </h3>
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="flex items-center space-x-4">
                      <div className="text-4xl font-bold text-blue-600">
                        {room.rating}
                      </div>
                      <div>
                        <div className="flex items-center space-x-1 mb-1">
                          {[...Array(5)].map((_, i) => (
                            <StarIcon
                              key={i}
                              className={`w-5 h-5 ${
                                i < Math.floor(room.rating) 
                                  ? 'text-yellow-400' 
                                  : 'text-gray-300'
                              }`}
                            />
                          ))}
                        </div>
                        <p className="text-gray-600 text-sm">
                          Basé sur {room.reviewCount || 0} avis clients
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            </div>

            {/* Colonne réservation */}
            <div className="lg:col-span-1">
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.3 }}
                className="bg-white rounded-2xl shadow-sm p-6 sticky top-8"
              >
                <div className="text-center mb-6">
                  <h2 className="text-xl font-semibold text-gray-900 mb-2">
                    {isConnected ? '🎯 Réserver cette chambre' : '🔑 Réservation'}
                  </h2>
                  <p className="text-gray-600 text-sm">
                    {isConnected 
                      ? 'Complétez vos informations pour réserver' 
                      : 'Connectez-vous pour réserver cette chambre'
                    }
                  </p>
                </div>

                {/* Message si non connecté */}
                {!isConnected && (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                    <div className="text-center">
                      <p className="text-blue-800 text-sm mb-3">
                        🔑 <strong>Connexion requise</strong><br/>
                        Pour réserver cette chambre, vous devez avoir un compte.
                      </p>
                      <div className="space-y-2">
                        <Link
                          href="/auth/login"
                          className="block w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors font-medium"
                        >
                          Se connecter
                        </Link>
                        <Link
                          href="/auth/register"
                          className="block w-full border border-blue-600 text-blue-600 py-2 rounded-lg hover:bg-blue-50 transition-colors font-medium"
                        >
                          Créer un compte
                        </Link>
                      </div>
                    </div>
                  </div>
                )}

                {/* Message si compte inactif */}
                {isConnected && user && !user.isActive && (
                  <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-6">
                    <p className="text-orange-800 text-sm text-center">
                      ⚠️ Votre compte est désactivé. 
                      <Link href="/auth/reactivate" className="font-medium underline">
                        Réactivez-le
                      </Link> pour réserver.
                    </p>
                  </div>
                )}

                {bookingError && (
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                    <p className="text-red-800 text-sm">{bookingError}</p>
                  </div>
                )}

                <div className="space-y-4">
                  {/* Prix affiché même si non connecté */}
                  <div className="text-center p-4 bg-blue-50 rounded-lg">
                    <div className="text-3xl font-bold text-blue-600 mb-1">
                      {room.price}€
                    </div>
                    <div className="text-gray-600">par nuit</div>
                  </div>

                  {/* Formulaire de réservation (seulement si connecté et actif) */}
                  {isConnected && user?.isActive && (
                    <>
                      {/* Dates avec validation améliorée */}
                      <div className="grid grid-cols-2 gap-3">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Arrivée (à partir de 14h)
                          </label>
                          <input
                            type="date"
                            value={bookingData.checkIn}
                            onChange={(e) => {
                              setBookingData({...bookingData, checkIn: e.target.value})
                              if (bookingError) setBookingError('')
                            }}
                            min={new Date().toISOString().split('T')[0]}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Départ (avant 11h)
                          </label>
                          <input
                            type="date"
                            value={bookingData.checkOut}
                            onChange={(e) => {
                              setBookingData({...bookingData, checkOut: e.target.value})
                              if (bookingError) setBookingError('')
                            }}
                            min={bookingData.checkIn || new Date().toISOString().split('T')[0]}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          />
                        </div>
                      </div>

                      {/* Nombre de personnes */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Nombre de personnes
                        </label>
                        <div className="flex items-center justify-between border border-gray-300 rounded-lg p-2">
                          <button
                            type="button"
                            onClick={() => setBookingData({
                              ...bookingData, 
                              guests: Math.max(1, bookingData.guests - 1)
                            })}
                            className="p-1 hover:bg-gray-100 rounded"
                            disabled={bookingData.guests <= 1}
                          >
                            <MinusIcon className="w-4 h-4 text-gray-600" />
                          </button>
                          
                          <div className="flex items-center space-x-2">
                            <UsersIcon className="w-4 h-4 text-gray-600" />
                            <span className="font-medium">{bookingData.guests}</span>
                          </div>
                          
                          <button
                            type="button"
                            onClick={() => setBookingData({
                              ...bookingData, 
                              guests: Math.min(room.capacity, bookingData.guests + 1)
                            })}
                            className="p-1 hover:bg-gray-100 rounded"
                            disabled={bookingData.guests >= room.capacity}
                          >
                            <PlusIcon className="w-4 h-4 text-gray-600" />
                          </button>
                        </div>
                        <p className="text-xs text-gray-500 mt-1">
                          Maximum {room.capacity} personne(s) pour cette chambre
                        </p>
                      </div>

                      {/* Demandes spéciales */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Demandes spéciales (optionnel)
                        </label>
                        <textarea
                          value={bookingData.specialRequests}
                          onChange={(e) => setBookingData({...bookingData, specialRequests: e.target.value})}
                          rows={3}
                          placeholder="Étage élevé, vue mer, lit king size..."
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </div>

                      {/* Récapitulatif */}
                      {bookingData.checkIn && bookingData.checkOut && (
                        <div className="bg-blue-50 rounded-lg p-4">
                          <h4 className="font-semibold text-blue-900 mb-2">
                            💰 Récapitulatif
                          </h4>
                          <div className="text-xs text-blue-700 mb-2">
                            📍 Arrivée: à partir de 14h • Départ: avant 11h
                          </div>
                          <div className="space-y-1 text-sm">
                            <div className="flex justify-between">
                              <span className="text-blue-700">Durée:</span>
                              <span className="font-medium text-blue-900">
                                {getNights()} nuit(s)
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-blue-700">Prix par nuit:</span>
                              <span className="font-medium text-blue-900">
                                {room.price}€
                              </span>
                            </div>
                            <div className="flex justify-between border-t border-blue-200 pt-1">
                              <span className="font-semibold text-blue-900">Total:</span>
                              <span className="font-bold text-blue-900 text-lg">
                                {calculateTotal()}€
                              </span>
                            </div>
                          </div>
                        </div>
                      )}
                    </>
                  )}

                  {/* Bouton de réservation conditionnel */}
                  <button
                    onClick={handleBooking}
                    disabled={
                      bookingLoading || 
                      (!isConnected || !user?.isActive) && !(!isConnected) ||
                      (isConnected && user?.isActive && (!bookingData.checkIn || !bookingData.checkOut))
                    }
                    className={`w-full py-3 rounded-lg font-semibold transition-colors flex items-center justify-center space-x-2 ${
                      !isConnected 
                        ? 'bg-blue-600 text-white hover:bg-blue-700'
                        : !user?.isActive
                          ? 'bg-orange-600 text-white hover:bg-orange-700'
                          : bookingData.checkIn && bookingData.checkOut
                            ? 'bg-blue-600 text-white hover:bg-blue-700'
                            : 'bg-gray-300 text-gray-600 cursor-not-allowed'
                    }`}
                  >
                    {bookingLoading ? (
                      <>
                        <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                        <span>Réservation...</span>
                      </>
                    ) : !isConnected ? (
                      <>
                        <span>🔑 Se connecter pour réserver</span>
                      </>
                    ) : !user?.isActive ? (
                      <>
                        <span>⚠️ Réactiver pour réserver</span>
                      </>
                    ) : (
                      <>
                        <CalendarDaysIcon className="w-5 h-5" />
                        <span>
                          {calculateTotal() > 0 
                            ? `Réserver pour ${calculateTotal()}€` 
                            : 'Réserver maintenant'
                          }
                        </span>
                      </>
                    )}
                  </button>

                  {/* Garanties (toujours affichées) */}
                  <div className="pt-4 border-t border-gray-200">
                    <div className="space-y-2">
                      <div className="flex items-center space-x-2 text-sm text-gray-600">
                        <ShieldCheckIcon className="w-4 h-4 text-green-500" />
                        <span>Annulation gratuite jusqu'à 24h avant</span>
                      </div>
                      <div className="flex items-center space-x-2 text-sm text-gray-600">
                        <CheckCircleIcon className="w-4 h-4 text-green-500" />
                        <span>Confirmation immédiate</span>
                      </div>
                      <div className="flex items-center space-x-2 text-sm text-gray-600">
                        <CheckCircleIcon className="w-4 h-4 text-green-500" />
                        <span>Paiement sécurisé</span>
                      </div>
                    </div>
                  </div>

                  {/* Contact (toujours affiché) */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h4 className="font-semibold text-gray-900 mb-2">
                      📞 Besoin d'aide ?
                    </h4>
                    <p className="text-gray-600 text-sm mb-2">
                      Notre équipe est là pour vous aider
                    </p>
                    <div className="space-y-1 text-sm">
                      <div className="text-gray-700">
                        📱 +221 33 123 45 67
                      </div>
                      <div className="text-gray-700">
                        ✉️ contact@hotel-luxe.fr
                      </div>
                      <div className="text-gray-700">
                        🕐 Support 24h/24
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            </div>
          </div>

          {/* Section Avis */}
          <div className="lg:col-span-3 mt-8">
            <div className="space-y-8">
              <CreateReview 
                roomId={room.id} 
                onReviewCreated={() => {
                  // Forcer le rechargement des avis
                  window.location.reload()
                }}
              />
              <ReviewsList roomId={room.id} />
            </div>
          </div>
              roomId={room.id}
              onSuccess={(newReview) => {
                console.log("✅ Nouvel avis ajouté [msylla01]:", newReview.id)
                // Optionnel: recharger les avis
              }}
            />
          )}

          {/* Footer */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.8 }}
            className="mt-16 text-center text-gray-500"
          >
            <p className="text-sm">
              Détail chambre Hotel Luxe • Accessible à tous • Réservation avec connexion • msylla01 • 2025-10-03 10:21:08 UTC
            </p>
          </motion.div>
        </main>
      </div>
    </>
  )
}
