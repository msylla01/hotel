import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import Link from 'next/link'
import { motion } from 'framer-motion'
import { 
  ArrowLeftIcon,
  BanknotesIcon,
  CalendarDaysIcon,
  UsersIcon,
  CreditCardIcon,
  PhoneIcon,
  ExclamationTriangleIcon,
  CheckCircleIcon,
  XCircleIcon,
  ClockIcon,
  DocumentTextIcon,
  StarIcon
} from '@heroicons/react/24/outline'

export default function BookingDetail() {
  const router = useRouter()
  const { id } = router.query
  const [user, setUser] = useState(null)
  const [booking, setBooking] = useState(null)
  const [loading, setLoading] = useState(true)
  const [showCancelModal, setShowCancelModal] = useState(false)
  const [cancelReason, setCancelReason] = useState('')
  const [cancelLoading, setCancelLoading] = useState(false)
  const [showPaymentModal, setShowPaymentModal] = useState(false)
  const [paymentData, setPaymentData] = useState({
    phoneNumber: '',
    operator: 'ORANGE'
  })

  useEffect(() => {
    const token = localStorage.getItem('hotel_token')
    const userData = localStorage.getItem('hotel_user')
    
    if (!token || !userData) {
      router.push('/auth/login')
      return
    }

    const user = JSON.parse(userData)
    setUser(user)
    
    if (id) {
      fetchBookingDetail()
    }
  }, [router, id])

  const handlePaymentSuccess = (payment) => {
    setShowPaymentModal(false)
    fetchBookingDetail() // Recharger les donn√©es
    alert(`‚úÖ Paiement enregistr√© !\n\nTransaction: ${payment.transactionId}\nStatut: ${payment.status}\n\nVotre r√©servation sera mise √† jour sous peu.`)
  }

  const fetchBookingDetail = async () => {
    try {
      setLoading(true)
      
      console.log('üìã R√©cup√©ration d√©tail r√©servation [msylla01] - 2025-10-02 01:26:51:', id)
      
      const token = localStorage.getItem('hotel_token')
      const response = await fetch(`http://localhost:5000/api/bookings/${id}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (response.ok) {
        const data = await response.json()
        if (data.success) {
          setBooking(data.booking)
          console.log('‚úÖ D√©tail r√©servation r√©cup√©r√© [msylla01]:', data.booking.id)
        } else {
          throw new Error(data.message)
        }
      } else {
        throw new Error(`Erreur HTTP: ${response.status}`)
      }

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration d√©tail r√©servation [msylla01]:', error)
      alert('Erreur lors du chargement des d√©tails de la r√©servation')
      router.push('/dashboard')
    } finally {
      setLoading(false)
    }
  }

  const handleCancelBooking = async () => {
    try {
      setCancelLoading(true)
      
      const token = localStorage.getItem('hotel_token')
      const response = await fetch(`http://localhost:5000/api/bookings/${id}/cancel`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ reason: cancelReason })
      })

      const data = await response.json()

      if (data.success) {
        alert('‚úÖ R√©servation annul√©e avec succ√®s')
        setShowCancelModal(false)
        fetchBookingDetail() // Recharger les donn√©es
      } else {
        alert(`‚ùå ${data.message}`)
      }

    } catch (error) {
      console.error('‚ùå Erreur annulation [msylla01]:', error)
      alert('Erreur lors de l\'annulation')
    } finally {
      setCancelLoading(false)
    }
  }

  const handleInitiatePayment = async () => {
    try {
      if (!paymentData.phoneNumber) {
        alert('Veuillez saisir votre num√©ro de t√©l√©phone')
        return
      }

      const token = localStorage.getItem('hotel_token')
      const response = await fetch('http://localhost:5000/api/mobile-payments/initiate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          bookingId: booking.id,
          phoneNumber: paymentData.phoneNumber,
          operator: paymentData.operator,
          amount: booking.totalAmount
        })
      })

      const data = await response.json()

      if (data.success) {
        alert(`üí∞ Paiement initi√© !\n\n${data.payment.instructions.details}\n\nVotre paiement sera confirm√© par notre √©quipe dans les plus brefs d√©lais.`)
        setShowPaymentModal(false)
        fetchBookingDetail()
      } else {
        alert(`‚ùå ${data.message}`)
      }

    } catch (error) {
      console.error('‚ùå Erreur paiement [msylla01]:', error)
      alert('Erreur lors de l\'initiation du paiement')
    }
  }

  const getStatusBadge = (status) => {
    const statusConfig = {
      'CONFIRMED': { bg: 'bg-green-100', text: 'text-green-800', label: '‚úÖ Confirm√©e', icon: CheckCircleIcon },
      'PENDING': { bg: 'bg-yellow-100', text: 'text-yellow-800', label: '‚è≥ En attente', icon: ClockIcon },
      'CANCELLED': { bg: 'bg-red-100', text: 'text-red-800', label: '‚ùå Annul√©e', icon: XCircleIcon },
      'COMPLETED': { bg: 'bg-blue-100', text: 'text-blue-800', label: '‚ú® Termin√©e', icon: CheckCircleIcon }
    }
    
    const config = statusConfig[status] || statusConfig['PENDING']
    const IconComponent = config.icon
    
    return (
      <div className={`inline-flex items-center px-4 py-2 rounded-full ${config.bg} ${config.text}`}>
        <IconComponent className="w-5 h-5 mr-2" />
        <span className="font-medium">{config.label}</span>
      </div>
    )
  }

  const getPaymentStatusBadge = (status) => {
    const paymentConfig = {
      'COMPLETED': { bg: 'bg-green-100', text: 'text-green-800', label: 'üí≥ Pay√©' },
      'PENDING': { bg: 'bg-orange-100', text: 'text-orange-800', label: 'üí∞ En attente' },
      'FAILED': { bg: 'bg-red-100', text: 'text-red-800', label: '‚ùå √âchec' },
      'PROCESSING': { bg: 'bg-blue-100', text: 'text-blue-800', label: 'üîÑ En cours' }
    }
    
    const config = paymentConfig[status] || paymentConfig['PENDING']
    return (
      <span className={`inline-flex px-3 py-1 text-sm font-medium rounded-full ${config.bg} ${config.text}`}>
        {config.label}
      </span>
    )
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Chargement des d√©tails...</p>
        </div>
      </div>
    )
  }

  if (!booking || !user) {
    return null
  }

  return (
    <>
      <Head>
        <title>R√©servation #{booking.id} - Hotel Luxe</title>
        <meta name="description" content={`D√©tails de votre r√©servation ${booking.room.name}`} />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between py-6">
              <Link
                href="/dashboard"
                className="flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors"
              >
                <ArrowLeftIcon className="w-5 h-5" />
                <span>Retour au dashboard</span>
              </Link>
              
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                  <span className="text-white font-bold text-sm">H</span>
                </div>
                <span className="font-semibold text-gray-900">Hotel Luxe</span>
              </div>

              <div className="flex items-center space-x-4">
                <span className="text-sm text-gray-600">
                  {user.firstName} {user.lastName}
                </span>
              </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          
          {/* Header Section */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-8"
          >
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold text-gray-900 mb-2">
                  R√©servation #{booking.id}
                </h1>
                <p className="text-gray-600">
                  {booking.room.name} ‚Ä¢ {booking.nights} nuit(s) ‚Ä¢ {booking.guests} personne(s)
                </p>
              </div>
              <div className="text-right">
                {getStatusBadge(booking.status)}
                <div className="mt-2">
                  {getPaymentStatusBadge(booking.paymentStatus)}
                </div>
              </div>
            </div>
          </motion.div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            
            {/* D√©tails de la r√©servation */}
            <div className="lg:col-span-2 space-y-6">
              
              {/* Informations g√©n√©rales */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.2 }}
                className="bg-white rounded-2xl shadow-sm p-6"
              >
                <h2 className="text-xl font-semibold text-gray-900 mb-4">üìã Informations de la r√©servation</h2>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <label className="text-sm font-medium text-gray-500">Chambre</label>
                      <p className="text-lg font-semibold text-gray-900">{booking.room.name}</p>
                      <p className="text-sm text-gray-600">{booking.room.type} ‚Ä¢ {booking.room.size}m¬≤</p>
                    </div>
                    
                    <div>
                      <label className="text-sm font-medium text-gray-500">Dates de s√©jour</label>
                      <div className="flex items-center space-x-4 mt-1">
                        <div>
                          <p className="font-medium text-gray-900">Arriv√©e</p>
                          <p className="text-blue-600">{new Date(booking.checkIn).toLocaleDateString('fr-FR')}</p>
                          <p className="text-xs text-gray-500">√Ä partir de 14h</p>
                        </div>
                        <div>
                          <p className="font-medium text-gray-900">D√©part</p>
                          <p className="text-blue-600">{new Date(booking.checkOut).toLocaleDateString('fr-FR')}</p>
                          <p className="text-xs text-gray-500">Avant 11h</p>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-4">
                    <div>
                      <label className="text-sm font-medium text-gray-500">Personnes</label>
                      <p className="text-lg font-semibold text-gray-900 flex items-center">
                        <UsersIcon className="w-5 h-5 mr-2 text-gray-400" />
                        {booking.guests} personne(s)
                      </p>
                    </div>
                    
                    <div>
                      <label className="text-sm font-medium text-gray-500">Prix total</label>
                      <p className="text-2xl font-bold text-blue-600">{booking.totalAmount}‚Ç¨</p>
                      <p className="text-sm text-gray-500">{booking.nights} nuit(s) √ó {booking.room.price}‚Ç¨</p>
                    </div>
                  </div>
                </div>

                {booking.specialRequests && (
                  <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                    <label className="text-sm font-medium text-gray-500 block mb-2">Demandes sp√©ciales</label>
                    <p className="text-gray-700">{booking.specialRequests}</p>
                  </div>
                )}
              </motion.div>

              {/* Image de la chambre */}
              {booking.roomImage && (
                <motion.div
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.3 }}
                  className="bg-white rounded-2xl shadow-sm overflow-hidden"
                >
                  <img
                    src={booking.roomImage}
                    alt={booking.room.name}
                    className="w-full h-64 object-cover"
                  />
                  <div className="p-4">
                    <h3 className="font-semibold text-gray-900">{booking.room.name}</h3>
                    <p className="text-gray-600 text-sm mt-1">{booking.room.description}</p>
                  </div>
                </motion.div>
              )}

              {/* Historique des paiements */}
              {booking.payment && booking.payment.length > 0 && (
                <motion.div
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.4 }}
                  className="bg-white rounded-2xl shadow-sm p-6"
                >
                  <h2 className="text-xl font-semibold text-gray-900 mb-4">üí≥ Historique des paiements</h2>
                  
                  <div className="space-y-4">
                    {booking.payment.map((payment, index) => (
                      <div key={payment.id} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-2">
                          <div>
                            <p className="font-medium text-gray-900">Transaction #{payment.transactionId}</p>
                            <p className="text-sm text-gray-600">
                              {payment.method} {payment.phoneNumber && `‚Ä¢ ${payment.phoneNumber}`}
                            </p>
                          </div>
                          <div className="text-right">
                            {getPaymentStatusBadge(payment.status)}
                            <p className="text-lg font-semibold text-gray-900 mt-1">{payment.amount}‚Ç¨</p>
                          </div>
                        </div>
                        
                        {payment.adminNotes && (
                          <div className="mt-3 p-3 bg-gray-50 rounded text-sm text-gray-700">
                            <DocumentTextIcon className="w-4 h-4 inline mr-1" />
                            {payment.adminNotes}
                          </div>
                        )}
                        
                        <p className="text-xs text-gray-500 mt-2">
                          Cr√©√© le {new Date(payment.createdAt).toLocaleString('fr-FR')}
                          {payment.updatedAt !== payment.createdAt && (
                            <span> ‚Ä¢ Mis √† jour le {new Date(payment.updatedAt).toLocaleString('fr-FR')}</span>
                          )}
                        </p>
                      </div>
                    ))}
                  </div>
                </motion.div>
              )}
            </div>

            {/* Actions */}
            <div className="lg:col-span-1">
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.5 }}
                className="bg-white rounded-2xl shadow-sm p-6 sticky top-8"
              >
                <h2 className="text-xl font-semibold text-gray-900 mb-6">üéØ Actions</h2>
                
                <div className="space-y-4">
                  
                  {/* Paiement si en attente */}
                  {booking.status === 'PENDING' && booking.paymentStatus === 'PENDING' && (
                    <button
                      onClick={() => setShowPaymentModal(true)}
                      className="w-full bg-green-600 text-white py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors flex items-center justify-center space-x-2"
                    >
                      <CreditCardIcon className="w-5 h-5" />
                      <span>Payer maintenant</span>
                    </button>
                  )}

                  {/* Annulation si possible */}
                  {booking.canCancel && (
                    <button
                      onClick={() => setShowCancelModal(true)}
                      className="w-full border border-red-300 text-red-700 py-3 rounded-lg font-semibold hover:bg-red-50 transition-colors flex items-center justify-center space-x-2"
                    >
                      <XCircleIcon className="w-5 h-5" />
                      <span>Annuler la r√©servation</span>
                    </button>
                  )}

                  {/* Contact */}
                  <div className="border-t border-gray-200 pt-4">
                    <h3 className="font-semibold text-gray-900 mb-3">üìû Besoin d'aide ?</h3>
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center space-x-2">
                        <PhoneIcon className="w-4 h-4 text-green-600" />
                        <span>+33 1 23 45 67 89</span>
                      </div>
                      <p className="text-gray-600">Support 24h/24</p>
                    </div>
                  </div>

                  {/* Informations importantes */}
                  <div className="bg-blue-50 rounded-lg p-4">
                    <h4 className="font-semibold text-blue-900 mb-2">‚ÑπÔ∏è √Ä savoir</h4>
                    <ul className="text-sm text-blue-800 space-y-1">
                      <li>‚Ä¢ Check-in: 14h00</li>
                      <li>‚Ä¢ Check-out: 11h00</li>
                      <li>‚Ä¢ Annulation gratuite 24h avant</li>
                      <li>‚Ä¢ Paiement mobile accept√©</li>
                    </ul>
                  </div>
                </div>
              </motion.div>
            </div>
          </div>
        </main>

        {/* Modal d'annulation */}
        {showCancelModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Annuler la r√©servation</h3>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Raison de l'annulation (optionnel)
                </label>
                <textarea
                  value={cancelReason}
                  onChange={(e) => setCancelReason(e.target.value)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  placeholder="Changement de plans, emp√™chement..."
                />
              </div>
              
              <div className="flex space-x-3">
                <button
                  onClick={() => setShowCancelModal(false)}
                  className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                >
                  Fermer
                </button>
                <button
                  onClick={handleCancelBooking}
                  disabled={cancelLoading}
                  className="flex-1 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50"
                >
                  {cancelLoading ? 'Annulation...' : 'Confirmer l\'annulation'}
                </button>
              </div>
            </div>
          </div>
        )}

